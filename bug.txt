1.react里input新增的type email ，label上移效果无法生效
解决方案：
1.自己设置valid，type改为html4的type

//已解决 
设置效果是满足input自检的validation后才会停留，如果输入不满足input自身的检测，那会默认没有输入参数而使动态无法生效


2.api 
    1.axios的response没有ok的属性，不要检查ok
    2.把proxy设置成flask的port似乎不能直接使用相对路径解决
        解决方法：直接把flask的全部地址复制进去了，暂时不知道更高明的办法
    3.api返回图片，可以用flask中的send_file函数，
        但：
        该函数将整个文件读入内存，对大型文件，需要进行优化
        采用返回base64字符串的方法将图片返回，
        可以从response.data中读取到。（貌似也蛮大的）
        有优化空间
    

3.返回图片问题 
    本来是转换成base64编码返回来，但是测试了半天，png1mbase64转成4m，而且还没办法
    在前台显示，麻了
    直接用send_file了，一张图片应该不算大。
    这个也是暂留问题，不知道为什么导致图像显示不出来，chatgpt说可能是图片过大了

4.还是返回图片问题
    react 里的<img />不能直接加载本地图片，只能通过import的形式加载
    所以从api中传回来的文件流也不能直接用，要先转换成blog形式，再用URL生成URL，用这个参数作为src的参数，成功把本地图片载入到了前端

5.关于人脸编辑的健壮性需求：（来不及了先懒得做了）
    1.点击按钮前，要确认是否有图片存在
    2.应该再加一个isLoading的state，outimage这块应该由isLoading判断没有图片输出是因为没有传入还是只是在加载中

6.关于paddleGAN测试中的bug：对于性别转换这方面，明显男性转女性非常困难，基本不成功，只能女性转男性，且女性转男性效果并不好，女性转男性后的男性有一种很阴柔的感觉，男转女要把offset调为负数

7.setfile是在input里实现的，无法复用/应该有提醒

8.fetch flask api的时候，因为是两个端口，所以有跨域问题，要引入CORS，因为是开发环境，就懒得定义限制了，注意如果是provide环境，要定义限制

9.POST和PUT的区别
在http中，put被定义为幂等的方法，post不是幂等的方法。

　　幂等：数学中的一个术语，对于单个输入或者无输入的运算方法，如果每次都是同样的结果，则是幂等的。也就是说，如果一个网络重复执行多次，产生的效果是一样的，那就是幂等。

post

　　　　用于提交请求，可以更新或者创建资源，是非幂等的

　　　　在用户注册时，每次提交都是创建一个用户账号，此时用post

　　put

　　　　用于向指定的url传送更新资源，是幂等的

　　　　还是用户模块，比如修改密码，虽然提交的还是账户名和密码，但是每次提交都只是更新该用户密码，每次请求都只是覆盖原型的值，此时用put

　　用post还是put

　　　　如果该更新对应的url多次调用的结果一致，用put

　　　　如果每次提交相同的内容，最终结果不一致，用post


写变量存储输入值时，用let定义了变量，切换第一次按钮时变量保持改变，切换第二次按钮后变量恢复初值？直接用useEffect 
切身感受了一下react和js的区别2333 
照片编辑器可以说是js->react的改写

5.9更新：
明天做：
用户管理页面：目前只想它展示用户的基本信息，然后可以修改更新就行 完成

在前端进行put请求的时候遇到了一个问题，就是用postman请求update api正常返回200，但前端请求就返回了308 
经过查询chatgpt以及google，发现
首先：利用id更新的机制，在url最后记得/<id>/要在末尾加/
其次：flask 的cors跨域问题，
在默认情况下，浏览器不允许在可能涉及敏感数据的跨域请求中共享 cookie 和身份验证凭据等信息。为了允许在跨域请求中使用这些凭据，您需要在 Flask 应用程序中为 CORS 扩展设置 supports_credentials=True 参数。

在您的 Flask 应用程序中，需要在设置 CORS 之后添加以下代码：
from flask_cors import CORS

app = Flask(__name__)
CORS(app, supports_credentials=True)  # 注意这里需要设置 supports_credentials 参数为 True

进行这两个修改后，可以正常运行

5.10做： 
发布页面：应该也蛮简单，把post的页面做好就行
暂时只考虑用户的发布，关于根据id查询用户发布的所有文章等功能暂时不考虑

关于各种图片bug的总结：
1.react不像正常html那样，可以直接把本地的地址拿来当图片的src，如果想要在src展示图片，目前我已知的：
1.把图片转化为blob格式的url，可以正常展示在页面上
2.把图片下载到public，然后在src填写相对路径，可以正常展示在页面上
3.下载google的服务器插件（这个没有试过，因为如果用这个的话服务器要一直开着）
目前应对各种图片的显示问题，还是觉得转化成blob格式最方便快捷

好吧，blob也有陷阱= =
请注意，当您不再需要使用Blob URL时，应调用URL.revokeObjectURL(url)来释放该URL，以避免内存泄漏。
不过对应毕设应该够了，这个感觉有点像new啊，不过我new到后来也没释放了23333.。。。。

然后明天把服务器环境搭起来，把照片编辑的功能加上，还有下载照片的功能也加上，然后录个视频给老师看，ok后开始写论文初稿